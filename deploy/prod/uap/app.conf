map $http_origin $cors_origin_header {
    default "";
    "~(^|^http:\/\/)(localhost$|localhost:[0-9]{1,4}$)" "$http_origin";
    "~(^(http(s)?:\/\/)?(.*\.)?exosphere.localhost(:[0-9]{1,5})?$)" "$http_origin";
    "https://my-example.exosphere.app" "$http_origin";
}

map $http_origin $cors_cred {
    default "";
    "~(^|^http:\/\/)(localhost$|localhost:[0-9]{1,4}$)" "true";
    "~(^(http(s)?:\/\/)?(.*\.)?exosphere.localhost(:[0-9]{1,5})?$)" "true";
    "https://my-example.exosphere.app" "true";
}


map $host $proto {
    default https;
    "~*(^(http|https)-192-168-0-(\d+)-(\d+)\.proxy-example\.exosphere\.app$)" $2;
}


# Fourth octet can be 0 to 255
map $host $octet4 {
    "~*(^(http-|https-)?192-168-0-([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])-(\d+)\.proxy-example\.exosphere\.app$)" $3;
}

# Port can be whatever
map $host $port {
    "~*(^(http-|https-)?192-168-0-(\d+)-(\d+)\.proxy-example\.exosphere\.app$)" $4;
}

server {

        server_name *.proxy-example.exosphere.app;

        add_header Access-Control-Allow-Origin $cors_origin_header always;
        add_header Access-Control-Allow-Credentials $cors_cred;
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
        add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Is-Electron";
        add_header "Access-Control-Max-Age" 86400;


        if ($request_method = 'OPTIONS' ) {
            return 204 no-content;
        }

        location / {
                proxy_pass $proto://192.168.0.$octet4:$port;
                proxy_ssl_verify off;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-Proto $scheme;

                # Required for web sockets to function
                proxy_http_version 1.1;
                proxy_buffering off;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";

                # TODO set cookie path to restrict cookies to this host and port
                #proxy_cookie_path / $cookie_path;

        }

    client_max_body_size 0;
    proxy_http_version 1.1;
    proxy_request_buffering off;

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/proxy-example.exosphere.app/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/proxy-example.exosphere.app/privkey.pem; # managed by Certbot

}

server {
    if ($host = proxy-example.exosphere.app) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    listen [::]:80;


    server_name proxy-example.exosphere.app;
    return 404; # managed by Certbot


}

